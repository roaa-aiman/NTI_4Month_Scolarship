
DIO_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000b20  00000bf4  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e09  00000000  00000000  00000e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba0  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c4  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000488  00000000  00000000  000059a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000308  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000116e  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000729e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000b02  00000b02  00000bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007408  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000010  00800060  00000b10  00000be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.KPD_u8GetPressedKey 00000140  000000d8  000000d8  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_lcd_kick 0000001e  00000a5a  00000a5a  00000b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_WRITE_COMMAND 000000a2  0000053e  0000053e  00000612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_CLEAR_SCREEN 00000008  00000afa  00000afa  00000bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_WRITE_CHAR 000000a2  000005e0  000005e0  000006b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_INIT 00000090  00000720  00000720  000007f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_GOTOXY 00000024  00000a36  00000a36  00000b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_voidSendString 0000001a  00000a96  00000a96  00000b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_voidWriteNumber 0000009e  00000682  00000682  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000023  000000b4  000000b4  00000188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.main    00000126  00000218  00000218  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.ADC_voidInit 00000060  00000818  00000818  000008ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.ADC_voidGetDigitalValue 00000032  00000a04  00000a04  00000ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DIO_voidInit 0000001a  00000ab0  00000ab0  00000b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DIO_voidSetPinDirection 00000100  0000033e  0000033e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DIO_voidSetPinValue 00000100  0000043e  0000043e  00000512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_voidGetPinValue 00000068  000007b0  000007b0  00000884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_1 00000052  00000878  00000878  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_2 00000052  000008ca  000008ca  0000099e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_3 00000052  0000091c  0000091c  000009f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.PRV2_pFunction 00000002  00800070  00800070  00000bf4  2**0
                  ALLOC
 36 .bss.PRV1_pFunction 00000002  00800072  00800072  00000bf4  2**0
                  ALLOC
 37 .bss.PRV0_pFunction 00000002  00800074  00800074  00000bf4  2**0
                  ALLOC
 38 .text.__vector_12 00000052  0000096e  0000096e  00000a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .bss.CallBack 00000002  00800076  00800076  00000bf4  2**0
                  ALLOC
 40 .text.libgcc.div 00000044  000009c0  000009c0  00000a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.mul 0000001e  00000a78  00000a78  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc  0000001a  00000aca  00000aca  00000b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_fini 00000002  00000b0a  00000b0a  00000bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_funcs_on_exit 00000002  00000b0c  00000b0c  00000be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_simulator_exit 00000002  00000b0e  00000b0e  00000be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.exit    00000016  00000ae4  00000ae4  00000bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text._Exit   00000004  00000b06  00000b06  00000bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_1>
   8:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_2>
   c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_3>
  10:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  14:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  18:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  1c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  20:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  24:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  28:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  2c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  30:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_12>
  34:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  38:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  3c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  40:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  44:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  48:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  4c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>
  50:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 0b       	sbc	r16, r16
  5a:	10 00       	.word	0x0010	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	78 80       	ld	r7, Y

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  ac:	0c 94 72 05 	jmp	0xae4	; 0xae4 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

00000b02 <__bad_interrupt>:
 b02:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.KPD_u8GetPressedKey:

000000d8 <KPD_u8GetPressedKey>:
#include "KPD.h"
#define F_CPU 16000000UL
#include <util/delay.h>

u8 KPD_u8GetPressedKey(void)
{
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	69 97       	sbiw	r28, 0x19	; 25
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
	u8 Local_u8RowIndex,Local_u8ColumnIndex;
	u8 Local_u8SwitchValue;
	u8 Local_u8Array[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS] = KPD_ARRAY;
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	e0 e6       	ldi	r30, 0x60	; 96
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	de 01       	movw	r26, r28
 104:	12 96       	adiw	r26, 0x02	; 2
 106:	01 90       	ld	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	8a 95       	dec	r24
 10c:	e1 f7       	brne	.-8      	; 0x106 <KPD_u8GetPressedKey+0x2e>
	u8 Local_u8RowsArray[NUMBER_OF_ROWS] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
 10e:	95 e0       	ldi	r25, 0x05	; 5
 110:	9a 8b       	std	Y+18, r25	; 0x12
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	8b 8b       	std	Y+19, r24	; 0x13
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8c 8b       	std	Y+20, r24	; 0x14
 11a:	22 e0       	ldi	r18, 0x02	; 2
 11c:	2d 8b       	std	Y+21, r18	; 0x15
	u8 Local_u8ColumnsArray[NUMBER_OF_COLUMNS] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
 11e:	27 e0       	ldi	r18, 0x07	; 7
 120:	2e 8b       	std	Y+22, r18	; 0x16
 122:	26 e0       	ldi	r18, 0x06	; 6
 124:	2f 8b       	std	Y+23, r18	; 0x17
 126:	98 8f       	std	Y+24, r25	; 0x18
 128:	89 8f       	std	Y+25, r24	; 0x19


	//deactivate all rows
	for (int i = 0; i<NUMBER_OF_ROWS; i++)
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	0d c0       	rjmp	.+26     	; 0x14a <KPD_u8GetPressedKey+0x72>
	{
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[i], DIO_PIN_HIGH);
 130:	e2 e1       	ldi	r30, 0x12	; 18
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e0 0f       	add	r30, r16
 13a:	f1 1f       	adc	r31, r17
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	60 81       	ld	r22, Z
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	u8 Local_u8RowsArray[NUMBER_OF_ROWS] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	u8 Local_u8ColumnsArray[NUMBER_OF_COLUMNS] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};


	//deactivate all rows
	for (int i = 0; i<NUMBER_OF_ROWS; i++)
 146:	0f 5f       	subi	r16, 0xFF	; 255
 148:	1f 4f       	sbci	r17, 0xFF	; 255
 14a:	04 30       	cpi	r16, 0x04	; 4
 14c:	11 05       	cpc	r17, r1
 14e:	84 f3       	brlt	.-32     	; 0x130 <KPD_u8GetPressedKey+0x58>
 150:	b1 2c       	mov	r11, r1
 152:	4c c0       	rjmp	.+152    	; 0x1ec <KPD_u8GetPressedKey+0x114>

	//looping
	for (Local_u8RowIndex=0; Local_u8RowIndex < NUMBER_OF_ROWS; Local_u8RowIndex++)
	{
		// ACTIVATE THE ROW
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex], DIO_PIN_LOW);
 154:	cb 2c       	mov	r12, r11
 156:	d1 2c       	mov	r13, r1
 158:	e2 e1       	ldi	r30, 0x12	; 18
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	ec 0d       	add	r30, r12
 162:	fd 1d       	adc	r31, r13
 164:	a0 80       	ld	r10, Z
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	6a 2d       	mov	r22, r10
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
		

		for (Local_u8ColumnIndex=0; Local_u8ColumnIndex<NUMBER_OF_COLUMNS; Local_u8ColumnIndex++)
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	34 c0       	rjmp	.+104    	; 0x1dc <KPD_u8GetPressedKey+0x104>
		{
			DIO_voidGetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
 174:	e1 2e       	mov	r14, r17
 176:	f1 2c       	mov	r15, r1
 178:	e6 e1       	ldi	r30, 0x16	; 22
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	ee 0d       	add	r30, r14
 182:	ff 1d       	adc	r31, r15
 184:	00 81       	ld	r16, Z
 186:	ae 01       	movw	r20, r28
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	5f 4f       	sbci	r21, 0xFF	; 255
 18c:	60 2f       	mov	r22, r16
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <DIO_voidGetPinValue>
			if (!Local_u8SwitchValue)
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	81 11       	cpse	r24, r1
 198:	20 c0       	rjmp	.+64     	; 0x1da <KPD_u8GetPressedKey+0x102>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9f e1       	ldi	r25, 0x1F	; 31
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <KPD_u8GetPressedKey+0xc6>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <KPD_u8GetPressedKey+0xcc>
 1a4:	00 00       	nop
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <KPD_u8GetPressedKey+0xde>
			{
				 //DEBOUNCING
				 _delay_ms(2);
				while(!Local_u8SwitchValue)
				{
					DIO_voidGetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
 1a8:	ae 01       	movw	r20, r28
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
 1ae:	60 2f       	mov	r22, r16
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <DIO_voidGetPinValue>
			DIO_voidGetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
			if (!Local_u8SwitchValue)
			{
				 //DEBOUNCING
				 _delay_ms(2);
				while(!Local_u8SwitchValue)
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	88 23       	and	r24, r24
 1ba:	b1 f3       	breq	.-20     	; 0x1a8 <KPD_u8GetPressedKey+0xd0>
				{
					DIO_voidGetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
				}
				Local_u8PressedKey= Local_u8Array[Local_u8RowIndex][Local_u8ColumnIndex];
 1bc:	cc 0c       	add	r12, r12
 1be:	dd 1c       	adc	r13, r13
 1c0:	cc 0c       	add	r12, r12
 1c2:	dd 1c       	adc	r13, r13
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	8c 0f       	add	r24, r28
 1ca:	9d 1f       	adc	r25, r29
 1cc:	c8 0e       	add	r12, r24
 1ce:	d9 1e       	adc	r13, r25
 1d0:	f6 01       	movw	r30, r12
 1d2:	ee 0d       	add	r30, r14
 1d4:	ff 1d       	adc	r31, r15
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
                return Local_u8PressedKey;	
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <KPD_u8GetPressedKey+0x11e>
	{
		// ACTIVATE THE ROW
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex], DIO_PIN_LOW);
		

		for (Local_u8ColumnIndex=0; Local_u8ColumnIndex<NUMBER_OF_COLUMNS; Local_u8ColumnIndex++)
 1da:	1f 5f       	subi	r17, 0xFF	; 255
 1dc:	14 30       	cpi	r17, 0x04	; 4
 1de:	50 f2       	brcs	.-108    	; 0x174 <KPD_u8GetPressedKey+0x9c>
                return Local_u8PressedKey;	
			}
			
		}
		//DEACTIVATE THE ROW
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex], DIO_PIN_HIGH);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	6a 2d       	mov	r22, r10
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	{
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[i], DIO_PIN_HIGH);
	}

	//looping
	for (Local_u8RowIndex=0; Local_u8RowIndex < NUMBER_OF_ROWS; Local_u8RowIndex++)
 1ea:	b3 94       	inc	r11
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	9b 15       	cp	r25, r11
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <KPD_u8GetPressedKey+0x11c>
 1f2:	b0 cf       	rjmp	.-160    	; 0x154 <KPD_u8GetPressedKey+0x7c>
			
		}
		//DEACTIVATE THE ROW
		DIO_voidSetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex], DIO_PIN_HIGH);
	}
	return Local_u8PressedKey;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
}
 1f6:	69 96       	adiw	r28, 0x19	; 25
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	08 95       	ret

Disassembly of section .text.LCD_lcd_kick:

00000a5a <LCD_lcd_kick>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_lcd_kick(void)
{
	DIO_voidSetPinValue(LCD_CTRL,EN_SWITCH, DIO_PIN_HIGH);
 a5a:	41 e0       	ldi	r20, 0x01	; 1
 a5c:	62 e0       	ldi	r22, 0x02	; 2
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a64:	85 e0       	ldi	r24, 0x05	; 5
 a66:	8a 95       	dec	r24
 a68:	f1 f7       	brne	.-4      	; 0xa66 <LCD_lcd_kick+0xc>
 a6a:	00 00       	nop
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CTRL,EN_SWITCH, DIO_PIN_LOW);
 a6c:	40 e0       	ldi	r20, 0x00	; 0
 a6e:	62 e0       	ldi	r22, 0x02	; 2
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
 a76:	08 95       	ret

Disassembly of section .text.LCD_WRITE_COMMAND:

0000053e <LCD_WRITE_COMMAND>:
	//_delay_ms(2);
}

void LCD_WRITE_COMMAND(u8 command)
{
 53e:	cf 93       	push	r28
 540:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_CTRL,RS_PIN, DIO_PIN_LOW);
	DIO_voidSetPortValue(LCD_PORT, command);
	LCD_lcd_kick();
	
	#elif LCD_u8_MODE==FOUR_BIT_MODE
	DIO_voidSetPinValue(LCD_CTRL,RS_PIN, DIO_PIN_LOW);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	63 e0       	ldi	r22, 0x03	; 3
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D7, GET_BIT(command,7) );
 54c:	4c 2f       	mov	r20, r28
 54e:	44 1f       	adc	r20, r20
 550:	44 27       	eor	r20, r20
 552:	44 1f       	adc	r20, r20
 554:	64 e0       	ldi	r22, 0x04	; 4
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D6, GET_BIT(command,6) );
 55c:	c6 fb       	bst	r28, 6
 55e:	44 27       	eor	r20, r20
 560:	40 f9       	bld	r20, 0
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D5, GET_BIT(command,5) );
 56a:	c5 fb       	bst	r28, 5
 56c:	44 27       	eor	r20, r20
 56e:	40 f9       	bld	r20, 0
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D4, GET_BIT(command,4) );
 578:	c4 fb       	bst	r28, 4
 57a:	44 27       	eor	r20, r20
 57c:	40 f9       	bld	r20, 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	LCD_lcd_kick();
 586:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_lcd_kick>
 58a:	8f e1       	ldi	r24, 0x1F	; 31
 58c:	93 e0       	ldi	r25, 0x03	; 3
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_WRITE_COMMAND+0x50>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_WRITE_COMMAND+0x56>
 594:	00 00       	nop
	_delay_us(200);
	
	
	DIO_voidSetPinValue (LCD_PORT, CLCD_D7, GET_BIT(command,3) );
 596:	c3 fb       	bst	r28, 3
 598:	44 27       	eor	r20, r20
 59a:	40 f9       	bld	r20, 0
 59c:	64 e0       	ldi	r22, 0x04	; 4
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D6, GET_BIT(command,2) );
 5a4:	c2 fb       	bst	r28, 2
 5a6:	44 27       	eor	r20, r20
 5a8:	40 f9       	bld	r20, 0
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D5, GET_BIT(command,1) );
 5b2:	c1 fb       	bst	r28, 1
 5b4:	44 27       	eor	r20, r20
 5b6:	40 f9       	bld	r20, 0
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D4, GET_BIT(command,0) );
 5c0:	4c 2f       	mov	r20, r28
 5c2:	41 70       	andi	r20, 0x01	; 1
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	LCD_lcd_kick();
 5cc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_lcd_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	8f e3       	ldi	r24, 0x3F	; 63
 5d2:	9f e1       	ldi	r25, 0x1F	; 31
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_WRITE_COMMAND+0x96>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_WRITE_COMMAND+0x9c>
 5da:	00 00       	nop
	_delay_ms(2);

	
	#endif
}
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

Disassembly of section .text.LCD_CLEAR_SCREEN:

00000afa <LCD_CLEAR_SCREEN>:
 */ 
#include "LCD_interface.h"

void LCD_CLEAR_SCREEN(void)
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 b00:	08 95       	ret

Disassembly of section .text.LCD_WRITE_CHAR:

000005e0 <LCD_WRITE_CHAR>:

	
	#endif
}
void LCD_WRITE_CHAR(u8 character)
{
 5e0:	cf 93       	push	r28
 5e2:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_CTRL,RS_PIN, DIO_PIN_HIGH);
	DIO_voidSetPortValue(LCD_PORT, character);
	LCD_lcd_kick();
	
	#elif LCD_u8_MODE==FOUR_BIT_MODE
	DIO_voidSetPinValue(LCD_CTRL,RS_PIN, DIO_PIN_HIGH);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D7, GET_BIT(character,7) );
 5ee:	4c 2f       	mov	r20, r28
 5f0:	44 1f       	adc	r20, r20
 5f2:	44 27       	eor	r20, r20
 5f4:	44 1f       	adc	r20, r20
 5f6:	64 e0       	ldi	r22, 0x04	; 4
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D6, GET_BIT(character,6) );
 5fe:	c6 fb       	bst	r28, 6
 600:	44 27       	eor	r20, r20
 602:	40 f9       	bld	r20, 0
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D5, GET_BIT(character,5) );
 60c:	c5 fb       	bst	r28, 5
 60e:	44 27       	eor	r20, r20
 610:	40 f9       	bld	r20, 0
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D4, GET_BIT(character,4) );
 61a:	c4 fb       	bst	r28, 4
 61c:	44 27       	eor	r20, r20
 61e:	40 f9       	bld	r20, 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>

	LCD_lcd_kick();
 628:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_lcd_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62c:	8f e1       	ldi	r24, 0x1F	; 31
 62e:	93 e0       	ldi	r25, 0x03	; 3
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <LCD_WRITE_CHAR+0x50>
 634:	00 c0       	rjmp	.+0      	; 0x636 <LCD_WRITE_CHAR+0x56>
 636:	00 00       	nop
	_delay_us(200);
	
	DIO_voidSetPinValue (LCD_PORT, CLCD_D7, GET_BIT(character,3) );
 638:	c3 fb       	bst	r28, 3
 63a:	44 27       	eor	r20, r20
 63c:	40 f9       	bld	r20, 0
 63e:	64 e0       	ldi	r22, 0x04	; 4
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D6, GET_BIT(character,2) );
 646:	c2 fb       	bst	r28, 2
 648:	44 27       	eor	r20, r20
 64a:	40 f9       	bld	r20, 0
 64c:	62 e0       	ldi	r22, 0x02	; 2
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D5, GET_BIT(character,1) );
 654:	c1 fb       	bst	r28, 1
 656:	44 27       	eor	r20, r20
 658:	40 f9       	bld	r20, 0
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_PORT, CLCD_D4, GET_BIT(character,0) );
 662:	4c 2f       	mov	r20, r28
 664:	41 70       	andi	r20, 0x01	; 1
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
	LCD_lcd_kick();
 66e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_lcd_kick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 672:	8f e3       	ldi	r24, 0x3F	; 63
 674:	9f e1       	ldi	r25, 0x1F	; 31
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_WRITE_CHAR+0x96>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_WRITE_CHAR+0x9c>
 67c:	00 00       	nop
	_delay_ms(2);
	
	
	#endif
}
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

Disassembly of section .text.LCD_INIT:

00000720 <LCD_INIT>:


void LCD_INIT(void)
{

	DIO_voidSetPinDirection (LCD_CTRL , RS_PIN,DIO_PIN_OUTPUT);
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	63 e0       	ldi	r22, 0x03	; 3
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CTRL,EN_SWITCH,DIO_PIN_OUTPUT);
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	62 e0       	ldi	r22, 0x02	; 2
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
	
	DIO_voidSetPinDirection (LCD_PORT , CLCD_D4,DIO_PIN_OUTPUT);
 734:	41 e0       	ldi	r20, 0x01	; 1
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_PORT , CLCD_D5,DIO_PIN_OUTPUT);
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (LCD_PORT , CLCD_D6,DIO_PIN_OUTPUT);
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	62 e0       	ldi	r22, 0x02	; 2
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_PORT , CLCD_D7,DIO_PIN_OUTPUT);
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	64 e0       	ldi	r22, 0x04	; 4
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_voidSetPinDirection>
	
	LCD_WRITE_COMMAND(LCD_CMD_RETURN_HOME);
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 762:	2f e7       	ldi	r18, 0x7F	; 127
 764:	85 eb       	ldi	r24, 0xB5	; 181
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	21 50       	subi	r18, 0x01	; 1
 76a:	80 40       	sbci	r24, 0x00	; 0
 76c:	90 40       	sbci	r25, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <LCD_INIT+0x48>
 770:	00 c0       	rjmp	.+0      	; 0x772 <LCD_INIT+0x52>
 772:	00 00       	nop
	_delay_ms(35);
	#if LCD_u8_MODE == EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#elif LCD_u8_MODE == FOUR_BIT_MODE
	//LCD_WRITE_COMMAND(0x02); // As datasheet
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 774:	88 e2       	ldi	r24, 0x28	; 40
 776:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 77a:	8f e9       	ldi	r24, 0x9F	; 159
 77c:	9f e0       	ldi	r25, 0x0F	; 15
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_INIT+0x5e>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_INIT+0x64>
 784:	00 00       	nop
	#endif
	_delay_ms(1);
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_ON);
 786:	8e e0       	ldi	r24, 0x0E	; 14
 788:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 78c:	8f e9       	ldi	r24, 0x9F	; 159
 78e:	9f e0       	ldi	r25, 0x0F	; 15
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <LCD_INIT+0x70>
 794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_INIT+0x76>
 796:	00 00       	nop
	_delay_ms(1);
	LCD_CLEAR_SCREEN();
 798:	0e 94 7d 05 	call	0xafa	; 0xafa <LCD_CLEAR_SCREEN>
 79c:	8f e3       	ldi	r24, 0x3F	; 63
 79e:	9f e1       	ldi	r25, 0x1F	; 31
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCD_INIT+0x80>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <LCD_INIT+0x86>
 7a6:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 7ae:	08 95       	ret

Disassembly of section .text.LCD_GOTOXY:

00000a36 <LCD_GOTOXY>:



void LCD_GOTOXY(u8 line, u8 position)
{
	if (line == 0)
 a36:	81 11       	cpse	r24, r1
 a38:	07 c0       	rjmp	.+14     	; 0xa48 <LCD_GOTOXY+0x12>
	{
		if (position < 16 && position >= 0)
 a3a:	60 31       	cpi	r22, 0x10	; 16
 a3c:	68 f4       	brcc	.+26     	; 0xa58 <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 a3e:	80 e8       	ldi	r24, 0x80	; 128
 a40:	86 0f       	add	r24, r22
 a42:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 a46:	08 95       	ret
		}
	}
	else if (line == 1)
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	31 f4       	brne	.+12     	; 0xa58 <LCD_GOTOXY+0x22>
	{
		if (position < 16 && position >= 0)
 a4c:	60 31       	cpi	r22, 0x10	; 16
 a4e:	20 f4       	brcc	.+8      	; 0xa58 <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 a50:	80 ec       	ldi	r24, 0xC0	; 192
 a52:	86 0f       	add	r24, r22
 a54:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_WRITE_COMMAND>
 a58:	08 95       	ret

Disassembly of section .text.LCD_voidSendString:

00000a96 <LCD_voidSendString>:
		}
	}
}

void LCD_voidSendString(u8 *str)
{
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	ec 01       	movw	r28, r24
	// Send each character in the string to the LCD
	while (*str)
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <LCD_voidSendString+0xe>
	{
		LCD_WRITE_CHAR(*str++);
 a9e:	21 96       	adiw	r28, 0x01	; 1
 aa0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WRITE_CHAR>
}

void LCD_voidSendString(u8 *str)
{
	// Send each character in the string to the LCD
	while (*str)
 aa4:	88 81       	ld	r24, Y
 aa6:	81 11       	cpse	r24, r1
 aa8:	fa cf       	rjmp	.-12     	; 0xa9e <LCD_voidSendString+0x8>
	{
		LCD_WRITE_CHAR(*str++);
	}
}
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

00000682 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber( u32 Copy_u8num )
{
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	2a 97       	sbiw	r28, 0x0a	; 10
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	de bf       	out	0x3e, r29	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	cd bf       	out	0x3d, r28	; 61
	
	u8 str[10]={0},i=0 ,j;
 698:	fe 01       	movw	r30, r28
 69a:	31 96       	adiw	r30, 0x01	; 1
 69c:	2a e0       	ldi	r18, 0x0A	; 10
 69e:	df 01       	movw	r26, r30
 6a0:	1d 92       	st	X+, r1
 6a2:	2a 95       	dec	r18
 6a4:	e9 f7       	brne	.-6      	; 0x6a0 <LCD_voidWriteNumber+0x1e>
	if(Copy_u8num==0)
 6a6:	61 15       	cp	r22, r1
 6a8:	71 05       	cpc	r23, r1
 6aa:	81 05       	cpc	r24, r1
 6ac:	91 05       	cpc	r25, r1
 6ae:	c1 f4       	brne	.+48     	; 0x6e0 <LCD_voidWriteNumber+0x5e>
	{
		LCD_WRITE_CHAR('0');
 6b0:	80 e3       	ldi	r24, 0x30	; 48
 6b2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WRITE_CHAR>
 6b6:	2a c0       	rjmp	.+84     	; 0x70c <LCD_voidWriteNumber+0x8a>
		LCD_WRITE_CHAR('-');
	}
	
	while(Copy_u8num!=0)
	{
		str[i]=Copy_u8num%10 +'0';
 6b8:	2a e0       	ldi	r18, 0x0A	; 10
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__udivmodsi4>
 6c4:	e1 e0       	ldi	r30, 0x01	; 1
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	ec 0f       	add	r30, r28
 6ca:	fd 1f       	adc	r31, r29
 6cc:	e1 0f       	add	r30, r17
 6ce:	f1 1d       	adc	r31, r1
 6d0:	60 5d       	subi	r22, 0xD0	; 208
 6d2:	60 83       	st	Z, r22
		Copy_u8num=Copy_u8num/10;
 6d4:	62 2f       	mov	r22, r18
 6d6:	73 2f       	mov	r23, r19
 6d8:	84 2f       	mov	r24, r20
 6da:	95 2f       	mov	r25, r21
		i++;
 6dc:	1f 5f       	subi	r17, 0xFF	; 255
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <LCD_voidWriteNumber+0x60>
 6e0:	10 e0       	ldi	r17, 0x00	; 0
	{
		Copy_u8num=Copy_u8num*(-1);
		LCD_WRITE_CHAR('-');
	}
	
	while(Copy_u8num!=0)
 6e2:	61 15       	cp	r22, r1
 6e4:	71 05       	cpc	r23, r1
 6e6:	81 05       	cpc	r24, r1
 6e8:	91 05       	cpc	r25, r1
 6ea:	31 f7       	brne	.-52     	; 0x6b8 <LCD_voidWriteNumber+0x36>
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <LCD_voidWriteNumber+0x86>
		
	}
	
	for (j=i;j>0;j--)
	{
		LCD_WRITE_CHAR(str[j-1]);
 6ee:	e1 2f       	mov	r30, r17
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	31 97       	sbiw	r30, 0x01	; 1
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	8c 0f       	add	r24, r28
 6fa:	9d 1f       	adc	r25, r29
 6fc:	e8 0f       	add	r30, r24
 6fe:	f9 1f       	adc	r31, r25
 700:	80 81       	ld	r24, Z
 702:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WRITE_CHAR>
		Copy_u8num=Copy_u8num/10;
		i++;
		
	}
	
	for (j=i;j>0;j--)
 706:	11 50       	subi	r17, 0x01	; 1
 708:	11 11       	cpse	r17, r1
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <LCD_voidWriteNumber+0x6c>
	{
		LCD_WRITE_CHAR(str[j-1]);
	}
}
 70c:	2a 96       	adiw	r28, 0x0a	; 10
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	f8 94       	cli
 712:	de bf       	out	0x3e, r29	; 62
 714:	0f be       	out	0x3f, r0	; 63
 716:	cd bf       	out	0x3d, r28	; 61
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	08 95       	ret

Disassembly of section .text.main:

00000218 <main>:
#include <stdio.h>
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	a7 97       	sbiw	r28, 0x27	; 39
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
	u16 digitalValue, AnalogValue;
	u8 Threshold_arr[2] = {0}, counter = 0;
 22c:	1c 82       	std	Y+4, r1	; 0x04
 22e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8PressedKey;
	
	DIO_voidInit();
 230:	0e 94 58 05 	call	0xab0	; 0xab0 <DIO_voidInit>
	LCD_INIT();
 234:	0e 94 90 03 	call	0x720	; 0x720 <LCD_INIT>
	ADC_voidInit(VOLTAGE_REFERENCE_AVCC);
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 0c 04 	call	0x818	; 0x818 <ADC_voidInit>
	
	while(1)
	{
		LCD_CLEAR_SCREEN();
 23e:	0e 94 7d 05 	call	0xafa	; 0xafa <LCD_CLEAR_SCREEN>
		LCD_GOTOXY(0,0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_GOTOXY>
		counter = 0;
		u8 myString1[] = "Enter threshold:";
 24a:	24 eb       	ldi	r18, 0xB4	; 180
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	81 e1       	ldi	r24, 0x11	; 17
 252:	f9 01       	movw	r30, r18
 254:	de 01       	movw	r26, r28
 256:	57 96       	adiw	r26, 0x17	; 23
 258:	74 2f       	mov	r23, r20
 25a:	0e 94 65 05 	call	0xaca	; 0xaca <__movmemx_qi>
		LCD_voidSendString(myString1);
 25e:	ce 01       	movw	r24, r28
 260:	47 96       	adiw	r24, 0x17	; 23
 262:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_voidSendString>
	
	while(1)
	{
		LCD_CLEAR_SCREEN();
		LCD_GOTOXY(0,0);
		counter = 0;
 266:	10 e0       	ldi	r17, 0x00	; 0
		u8 myString1[] = "Enter threshold:";
		LCD_voidSendString(myString1);
		
		while(counter < 2)
 268:	0f c0       	rjmp	.+30     	; 0x288 <main+0x70>
		{
			Local_u8PressedKey = KPD_u8GetPressedKey();
 26a:	0e 94 6c 00 	call	0xd8	; 0xd8 <KPD_u8GetPressedKey>
 26e:	08 2f       	mov	r16, r24
			if(Local_u8PressedKey != NO_PRESSED_KEY)
 270:	88 23       	and	r24, r24
 272:	51 f0       	breq	.+20     	; 0x288 <main+0x70>
			{
				LCD_WRITE_CHAR(Local_u8PressedKey);
 274:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WRITE_CHAR>
				Threshold_arr[counter] = Local_u8PressedKey;
 278:	e3 e0       	ldi	r30, 0x03	; 3
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ec 0f       	add	r30, r28
 27e:	fd 1f       	adc	r31, r29
 280:	e1 0f       	add	r30, r17
 282:	f1 1d       	adc	r31, r1
 284:	00 83       	st	Z, r16
				counter++;
 286:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_GOTOXY(0,0);
		counter = 0;
		u8 myString1[] = "Enter threshold:";
		LCD_voidSendString(myString1);
		
		while(counter < 2)
 288:	12 30       	cpi	r17, 0x02	; 2
 28a:	78 f3       	brcs	.-34     	; 0x26a <main+0x52>
				LCD_WRITE_CHAR(Local_u8PressedKey);
				Threshold_arr[counter] = Local_u8PressedKey;
				counter++;
			}
		}
		u16 Threshold = (Threshold_arr[0] - '0') * 10 + (Threshold_arr[1] - '0');
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	c0 97       	sbiw	r24, 0x30	; 48
 292:	9c 01       	movw	r18, r24
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	0c 81       	ldd	r16, Y+4	; 0x04
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	00 53       	subi	r16, 0x30	; 48
 2ae:	11 09       	sbc	r17, r1
 2b0:	08 0f       	add	r16, r24
 2b2:	19 1f       	adc	r17, r25
		
		ADC_voidGetDigitalValue(ADC_CHANNEL_1, &digitalValue);
 2b4:	be 01       	movw	r22, r28
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 02 05 	call	0xa04	; 0xa04 <ADC_voidGetDigitalValue>
		AnalogValue = digitalValue/10;
 2c0:	29 81       	ldd	r18, Y+1	; 0x01
 2c2:	3a 81       	ldd	r19, Y+2	; 0x02
 2c4:	ad ec       	ldi	r26, 0xCD	; 205
 2c6:	bc ec       	ldi	r27, 0xCC	; 204
 2c8:	0e 94 3c 05 	call	0xa78	; 0xa78 <__umulhisi3>
 2cc:	7c 01       	movw	r14, r24
 2ce:	f6 94       	lsr	r15
 2d0:	e7 94       	ror	r14
 2d2:	f6 94       	lsr	r15
 2d4:	e7 94       	ror	r14
 2d6:	f6 94       	lsr	r15
 2d8:	e7 94       	ror	r14
		
		LCD_GOTOXY(1,0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_GOTOXY>
		u8 myString2[] = "light percentage:";
 2e2:	25 ec       	ldi	r18, 0xC5	; 197
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	82 e1       	ldi	r24, 0x12	; 18
 2ea:	f9 01       	movw	r30, r18
 2ec:	de 01       	movw	r26, r28
 2ee:	15 96       	adiw	r26, 0x05	; 5
 2f0:	74 2f       	mov	r23, r20
 2f2:	0e 94 65 05 	call	0xaca	; 0xaca <__movmemx_qi>
		LCD_voidSendString(myString2);
 2f6:	ce 01       	movw	r24, r28
 2f8:	05 96       	adiw	r24, 0x05	; 5
 2fa:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_voidSendString>
		LCD_voidWriteNumber(AnalogValue);
 2fe:	b7 01       	movw	r22, r14
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 41 03 	call	0x682	; 0x682 <LCD_voidWriteNumber>
		LCD_WRITE_CHAR('%');
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCD_WRITE_CHAR>
		
		if(AnalogValue > Threshold)
 30e:	0e 15       	cp	r16, r14
 310:	1f 05       	cpc	r17, r15
 312:	30 f4       	brcc	.+12     	; 0x320 <main+0x108>
		{
			DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_PIN_LOW);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
 31e:	05 c0       	rjmp	.+10     	; 0x32a <main+0x112>
		}
		else
		{
			DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_PIN_HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_voidSetPinValue>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	83 ed       	ldi	r24, 0xD3	; 211
 32e:	90 e3       	ldi	r25, 0x30	; 48
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x118>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x122>
 33a:	00 00       	nop
		}
		_delay_ms(1000);
	}
 33c:	80 cf       	rjmp	.-256    	; 0x23e <main+0x26>

Disassembly of section .text.ADC_voidInit:

00000818 <ADC_voidInit>:
 *  Author: Roaa aiman 
 */
#include "ADC_interface.h" 
void ADC_voidInit(u8 copy_u8ReferrenceVoltage)
{
        switch(copy_u8ReferrenceVoltage)
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	91 f0       	breq	.+36     	; 0x840 <ADC_voidInit+0x28>
 81c:	18 f0       	brcs	.+6      	; 0x824 <ADC_voidInit+0xc>
 81e:	82 30       	cpi	r24, 0x02	; 2
 820:	41 f0       	breq	.+16     	; 0x832 <ADC_voidInit+0x1a>
 822:	14 c0       	rjmp	.+40     	; 0x84c <ADC_voidInit+0x34>
		{
			case VOLTAGE_REFERENCE_AVREF:
			  CLR_BIT(ADMUX_REG ,ADMUX_REFS1);
 824:	87 b1       	in	r24, 0x07	; 7
 826:	8f 77       	andi	r24, 0x7F	; 127
 828:	87 b9       	out	0x07, r24	; 7
			  CLR_BIT(ADMUX_REG ,ADMUX_REFS0);
 82a:	87 b1       	in	r24, 0x07	; 7
 82c:	8f 7b       	andi	r24, 0xBF	; 191
 82e:	87 b9       	out	0x07, r24	; 7
			  break;
 830:	0d c0       	rjmp	.+26     	; 0x84c <ADC_voidInit+0x34>
			case VOLTAGE_REFERENCE_INTERNAL:
			 SET_BIT(ADMUX_REG ,ADMUX_REFS1);
 832:	87 b1       	in	r24, 0x07	; 7
 834:	80 68       	ori	r24, 0x80	; 128
 836:	87 b9       	out	0x07, r24	; 7
			 SET_BIT(ADMUX_REG ,ADMUX_REFS0);
 838:	87 b1       	in	r24, 0x07	; 7
 83a:	80 64       	ori	r24, 0x40	; 64
 83c:	87 b9       	out	0x07, r24	; 7
			 break;
 83e:	06 c0       	rjmp	.+12     	; 0x84c <ADC_voidInit+0x34>
			case VOLTAGE_REFERENCE_AVCC:
			 CLR_BIT(ADMUX_REG ,ADMUX_REFS1);
 840:	87 b1       	in	r24, 0x07	; 7
 842:	8f 77       	andi	r24, 0x7F	; 127
 844:	87 b9       	out	0x07, r24	; 7
			 SET_BIT(ADMUX_REG ,ADMUX_REFS0);
 846:	87 b1       	in	r24, 0x07	; 7
 848:	80 64       	ori	r24, 0x40	; 64
 84a:	87 b9       	out	0x07, r24	; 7
		
		
		#if ADJUSTMENT == LEFT_ADJUSTMENT
		SET_BIT(ADMUX_REG,ADMUX_ADLAR);
		#elif ADJUSTMENT == RIGHT_ADJUSTMENT
		CLR_BIT(ADMUX_REG,ADMUX_ADLAR);
 84c:	87 b1       	in	r24, 0x07	; 7
 84e:	8f 7d       	andi	r24, 0xDF	; 223
 850:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADCSRA_REG,ADCSRA_ADPS0);
		SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
		SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);

		#elif ADC_PRESCALLER == DIVID_BY_128
		SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
 852:	86 b1       	in	r24, 0x06	; 6
 854:	84 60       	ori	r24, 0x04	; 4
 856:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
 858:	86 b1       	in	r24, 0x06	; 6
 85a:	82 60       	ori	r24, 0x02	; 2
 85c:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
 85e:	86 b1       	in	r24, 0x06	; 6
 860:	81 60       	ori	r24, 0x01	; 1
 862:	86 b9       	out	0x06, r24	; 6

		#endif

		#if ADC_AUTOTRIGGERED_MODE == SINGLE_CONVERSION
		CLR_BIT(ADCSRA_REG,ADCSRA_ADATE);
 864:	86 b1       	in	r24, 0x06	; 6
 866:	8f 7d       	andi	r24, 0xDF	; 223
 868:	86 b9       	out	0x06, r24	; 6
		#endif

		#if INTTERUPT_MODE ==  INTERRUPT_ENABLE  
		SET_BIT(ADCSRA_REG,ADCSRA_ADIE);
		#elif INTTERUPT_MODE ==  INTERRUPT_DISABLE	
		CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
 86a:	86 b1       	in	r24, 0x06	; 6
 86c:	87 7f       	andi	r24, 0xF7	; 247
 86e:	86 b9       	out	0x06, r24	; 6
		#endif
		
		#if ADC_MODE==ADC_ENABLE
		SET_BIT(ADCSRA_REG,ADCSRA_ADEN);
 870:	86 b1       	in	r24, 0x06	; 6
 872:	80 68       	ori	r24, 0x80	; 128
 874:	86 b9       	out	0x06, r24	; 6
 876:	08 95       	ret

Disassembly of section .text.ADC_voidGetDigitalValue:

00000a04 <ADC_voidGetDigitalValue>:
		#endif	
}							   

void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber,u16* copy_pu16DigitalValue)
{
	if((copy_pu16DigitalValue!=NULL)&&(copy_u8ChannelNumber<32))
 a04:	61 15       	cp	r22, r1
 a06:	71 05       	cpc	r23, r1
 a08:	a9 f0       	breq	.+42     	; 0xa34 <ADC_voidGetDigitalValue+0x30>
 a0a:	80 32       	cpi	r24, 0x20	; 32
 a0c:	98 f4       	brcc	.+38     	; 0xa34 <ADC_voidGetDigitalValue+0x30>
	{
		//clear channel bit 
		ADMUX_REG &=   0xE0;     //0b11100000;
 a0e:	97 b1       	in	r25, 0x07	; 7
 a10:	90 7e       	andi	r25, 0xE0	; 224
 a12:	97 b9       	out	0x07, r25	; 7
		//SELECT CHANNEL 
		ADMUX_REG |= copy_u8ChannelNumber;
 a14:	97 b1       	in	r25, 0x07	; 7
 a16:	89 2b       	or	r24, r25
 a18:	87 b9       	out	0x07, r24	; 7
		
		//start conversion
		SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
 a1a:	86 b1       	in	r24, 0x06	; 6
 a1c:	80 64       	ori	r24, 0x40	; 64
 a1e:	86 b9       	out	0x06, r24	; 6

		while(!GET_BIT(ADCSRA_REG,ADCSRA_ADIF))
 a20:	34 9b       	sbis	0x06, 4	; 6
 a22:	fe cf       	rjmp	.-4      	; 0xa20 <ADC_voidGetDigitalValue+0x1c>
			
			
		}

		//CLEAR THE FLAG
		SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
 a24:	86 b1       	in	r24, 0x06	; 6
 a26:	80 61       	ori	r24, 0x10	; 16
 a28:	86 b9       	out	0x06, r24	; 6
		
		*copy_pu16DigitalValue = ADC_REG;
 a2a:	84 b1       	in	r24, 0x04	; 4
 a2c:	95 b1       	in	r25, 0x05	; 5
 a2e:	fb 01       	movw	r30, r22
 a30:	91 83       	std	Z+1, r25	; 0x01
 a32:	80 83       	st	Z, r24
 a34:	08 95       	ret

Disassembly of section .text.DIO_voidInit:

00000ab0 <DIO_voidInit>:
#include "DIO_interface.h"


void DIO_voidInit (void)
{
	DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
 ab0:	1a ba       	out	0x1a, r1	; 26
	DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	87 bb       	out	0x17, r24	; 23
	DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
 ab6:	8d e3       	ldi	r24, 0x3D	; 61
 ab8:	84 bb       	out	0x14, r24	; 20
	DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
 aba:	11 ba       	out	0x11, r1	; 17
	DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
 abc:	1b ba       	out	0x1b, r1	; 27
	DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
	
	PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
 abe:	18 ba       	out	0x18, r1	; 24
	DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
	
	PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
 ac0:	8c e3       	ldi	r24, 0x3C	; 60
 ac2:	85 bb       	out	0x15, r24	; 21
	DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
	
	PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
 ac4:	88 ee       	ldi	r24, 0xE8	; 232
 ac6:	82 bb       	out	0x12, r24	; 18
 ac8:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinDirection:

0000033e <DIO_voidSetPinDirection>:
					break;
			case DIO_PORTC:
				    PORTC_REG ^=0xFF;
					break;
			case DIO_PORTD:
				    PORTD_REG ^=0xFF;
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	31 f1       	breq	.+76     	; 0x38e <DIO_voidSetPinDirection+0x50>
 342:	38 f0       	brcs	.+14     	; 0x352 <DIO_voidSetPinDirection+0x14>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_voidSetPinDirection+0xc>
 348:	40 c0       	rjmp	.+128    	; 0x3ca <DIO_voidSetPinDirection+0x8c>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	09 f4       	brne	.+2      	; 0x350 <DIO_voidSetPinDirection+0x12>
 34e:	5a c0       	rjmp	.+180    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 350:	08 95       	ret
 352:	68 30       	cpi	r22, 0x08	; 8
 354:	08 f0       	brcs	.+2      	; 0x358 <DIO_voidSetPinDirection+0x1a>
 356:	72 c0       	rjmp	.+228    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	59 f4       	brne	.+22     	; 0x372 <DIO_voidSetPinDirection+0x34>
 35c:	2a b3       	in	r18, 0x1a	; 26
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_voidSetPinDirection+0x2a>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_voidSetPinDirection+0x26>
 36c:	82 2b       	or	r24, r18
 36e:	8a bb       	out	0x1a, r24	; 26
 370:	08 95       	ret
 372:	41 11       	cpse	r20, r1
 374:	63 c0       	rjmp	.+198    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 376:	2a b3       	in	r18, 0x1a	; 26
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_voidSetPinDirection+0x44>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_voidSetPinDirection+0x40>
 386:	80 95       	com	r24
 388:	82 23       	and	r24, r18
 38a:	8a bb       	out	0x1a, r24	; 26
 38c:	08 95       	ret
 38e:	68 30       	cpi	r22, 0x08	; 8
 390:	08 f0       	brcs	.+2      	; 0x394 <DIO_voidSetPinDirection+0x56>
 392:	54 c0       	rjmp	.+168    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	59 f4       	brne	.+22     	; 0x3ae <DIO_voidSetPinDirection+0x70>
 398:	27 b3       	in	r18, 0x17	; 23
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_voidSetPinDirection+0x66>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_voidSetPinDirection+0x62>
 3a8:	82 2b       	or	r24, r18
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	08 95       	ret
 3ae:	41 11       	cpse	r20, r1
 3b0:	45 c0       	rjmp	.+138    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3b2:	27 b3       	in	r18, 0x17	; 23
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_voidSetPinDirection+0x80>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_voidSetPinDirection+0x7c>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	87 bb       	out	0x17, r24	; 23
 3c8:	08 95       	ret
 3ca:	68 30       	cpi	r22, 0x08	; 8
 3cc:	b8 f5       	brcc	.+110    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	59 f4       	brne	.+22     	; 0x3e8 <DIO_voidSetPinDirection+0xaa>
 3d2:	24 b3       	in	r18, 0x14	; 20
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_voidSetPinDirection+0xa0>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_voidSetPinDirection+0x9c>
 3e2:	82 2b       	or	r24, r18
 3e4:	84 bb       	out	0x14, r24	; 20
 3e6:	08 95       	ret
 3e8:	41 11       	cpse	r20, r1
 3ea:	28 c0       	rjmp	.+80     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3ec:	24 b3       	in	r18, 0x14	; 20
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_voidSetPinDirection+0xba>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_voidSetPinDirection+0xb6>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	84 bb       	out	0x14, r24	; 20
 402:	08 95       	ret
 404:	68 30       	cpi	r22, 0x08	; 8
 406:	d0 f4       	brcc	.+52     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	59 f4       	brne	.+22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40c:	21 b3       	in	r18, 0x11	; 17
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	81 bb       	out	0x11, r24	; 17
 420:	08 95       	ret
 422:	41 11       	cpse	r20, r1
 424:	0b c0       	rjmp	.+22     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 426:	21 b3       	in	r18, 0x11	; 17
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	81 bb       	out	0x11, r24	; 17
 43c:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

0000043e <DIO_voidSetPinValue>:
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	31 f1       	breq	.+76     	; 0x48e <DIO_voidSetPinValue+0x50>
 442:	38 f0       	brcs	.+14     	; 0x452 <DIO_voidSetPinValue+0x14>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	09 f4       	brne	.+2      	; 0x44a <DIO_voidSetPinValue+0xc>
 448:	40 c0       	rjmp	.+128    	; 0x4ca <DIO_voidSetPinValue+0x8c>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	09 f4       	brne	.+2      	; 0x450 <DIO_voidSetPinValue+0x12>
 44e:	5a c0       	rjmp	.+180    	; 0x504 <DIO_voidSetPinValue+0xc6>
 450:	08 95       	ret
 452:	68 30       	cpi	r22, 0x08	; 8
 454:	08 f0       	brcs	.+2      	; 0x458 <DIO_voidSetPinValue+0x1a>
 456:	72 c0       	rjmp	.+228    	; 0x53c <DIO_voidSetPinValue+0xfe>
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	59 f4       	brne	.+22     	; 0x472 <DIO_voidSetPinValue+0x34>
 45c:	2b b3       	in	r18, 0x1b	; 27
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_voidSetPinValue+0x2a>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_voidSetPinValue+0x26>
 46c:	82 2b       	or	r24, r18
 46e:	8b bb       	out	0x1b, r24	; 27
 470:	08 95       	ret
 472:	41 11       	cpse	r20, r1
 474:	63 c0       	rjmp	.+198    	; 0x53c <DIO_voidSetPinValue+0xfe>
 476:	2b b3       	in	r18, 0x1b	; 27
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_voidSetPinValue+0x44>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_voidSetPinValue+0x40>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	8b bb       	out	0x1b, r24	; 27
 48c:	08 95       	ret
 48e:	68 30       	cpi	r22, 0x08	; 8
 490:	08 f0       	brcs	.+2      	; 0x494 <DIO_voidSetPinValue+0x56>
 492:	54 c0       	rjmp	.+168    	; 0x53c <DIO_voidSetPinValue+0xfe>
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	59 f4       	brne	.+22     	; 0x4ae <DIO_voidSetPinValue+0x70>
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_voidSetPinValue+0x66>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_voidSetPinValue+0x62>
 4a8:	82 2b       	or	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
 4ac:	08 95       	ret
 4ae:	41 11       	cpse	r20, r1
 4b0:	45 c0       	rjmp	.+138    	; 0x53c <DIO_voidSetPinValue+0xfe>
 4b2:	28 b3       	in	r18, 0x18	; 24
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_voidSetPinValue+0x80>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_voidSetPinValue+0x7c>
 4c2:	80 95       	com	r24
 4c4:	82 23       	and	r24, r18
 4c6:	88 bb       	out	0x18, r24	; 24
 4c8:	08 95       	ret
 4ca:	68 30       	cpi	r22, 0x08	; 8
 4cc:	b8 f5       	brcc	.+110    	; 0x53c <DIO_voidSetPinValue+0xfe>
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	59 f4       	brne	.+22     	; 0x4e8 <DIO_voidSetPinValue+0xaa>
 4d2:	25 b3       	in	r18, 0x15	; 21
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_voidSetPinValue+0xa0>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_voidSetPinValue+0x9c>
 4e2:	82 2b       	or	r24, r18
 4e4:	85 bb       	out	0x15, r24	; 21
 4e6:	08 95       	ret
 4e8:	41 11       	cpse	r20, r1
 4ea:	28 c0       	rjmp	.+80     	; 0x53c <DIO_voidSetPinValue+0xfe>
 4ec:	25 b3       	in	r18, 0x15	; 21
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_voidSetPinValue+0xba>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_voidSetPinValue+0xb6>
 4fc:	80 95       	com	r24
 4fe:	82 23       	and	r24, r18
 500:	85 bb       	out	0x15, r24	; 21
 502:	08 95       	ret
 504:	68 30       	cpi	r22, 0x08	; 8
 506:	d0 f4       	brcc	.+52     	; 0x53c <DIO_voidSetPinValue+0xfe>
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	59 f4       	brne	.+22     	; 0x522 <DIO_voidSetPinValue+0xe4>
 50c:	22 b3       	in	r18, 0x12	; 18
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_voidSetPinValue+0xda>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_voidSetPinValue+0xd6>
 51c:	82 2b       	or	r24, r18
 51e:	82 bb       	out	0x12, r24	; 18
 520:	08 95       	ret
 522:	41 11       	cpse	r20, r1
 524:	0b c0       	rjmp	.+22     	; 0x53c <DIO_voidSetPinValue+0xfe>
 526:	22 b3       	in	r18, 0x12	; 18
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_voidSetPinValue+0xf4>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_voidSetPinValue+0xf0>
 536:	80 95       	com	r24
 538:	82 23       	and	r24, r18
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret

Disassembly of section .text.DIO_voidGetPinValue:

000007b0 <DIO_voidGetPinValue>:
		}
}

void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
	switch (copy_u8PortId)
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	89 f0       	breq	.+34     	; 0x7d6 <DIO_voidGetPinValue+0x26>
 7b4:	28 f0       	brcs	.+10     	; 0x7c0 <DIO_voidGetPinValue+0x10>
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	c9 f0       	breq	.+50     	; 0x7ec <DIO_voidGetPinValue+0x3c>
 7ba:	83 30       	cpi	r24, 0x03	; 3
 7bc:	11 f1       	breq	.+68     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7be:	08 95       	ret
	{
		case DIO_PORTA:
		    	*copy_pu8PinValue = GET_BIT(PINA_REG, copy_u8PinId);
 7c0:	89 b3       	in	r24, 0x19	; 25
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_voidGetPinValue+0x1a>
 7c6:	95 95       	asr	r25
 7c8:	87 95       	ror	r24
 7ca:	6a 95       	dec	r22
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_voidGetPinValue+0x16>
 7ce:	81 70       	andi	r24, 0x01	; 1
 7d0:	fa 01       	movw	r30, r20
 7d2:	80 83       	st	Z, r24
				break;
 7d4:	08 95       	ret
		case DIO_PORTB:
			    *copy_pu8PinValue = GET_BIT(PINB_REG, copy_u8PinId);
 7d6:	86 b3       	in	r24, 0x16	; 22
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_voidGetPinValue+0x30>
 7dc:	95 95       	asr	r25
 7de:	87 95       	ror	r24
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_voidGetPinValue+0x2c>
 7e4:	81 70       	andi	r24, 0x01	; 1
 7e6:	fa 01       	movw	r30, r20
 7e8:	80 83       	st	Z, r24
				break;
 7ea:	08 95       	ret
		case DIO_PORTC:
			    *copy_pu8PinValue = GET_BIT(PINC_REG, copy_u8PinId);
 7ec:	83 b3       	in	r24, 0x13	; 19
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_voidGetPinValue+0x46>
 7f2:	95 95       	asr	r25
 7f4:	87 95       	ror	r24
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_voidGetPinValue+0x42>
 7fa:	81 70       	andi	r24, 0x01	; 1
 7fc:	fa 01       	movw	r30, r20
 7fe:	80 83       	st	Z, r24
				break;
 800:	08 95       	ret
		case DIO_PORTD:
			    *copy_pu8PinValue = GET_BIT(PIND_REG, copy_u8PinId);
 802:	80 b3       	in	r24, 0x10	; 16
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	95 95       	asr	r25
 80a:	87 95       	ror	r24
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	81 70       	andi	r24, 0x01	; 1
 812:	fa 01       	movw	r30, r20
 814:	80 83       	st	Z, r24
 816:	08 95       	ret

Disassembly of section .text.__vector_1:

00000878 <__vector_1>:
	
}

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	2f 93       	push	r18
 884:	3f 93       	push	r19
 886:	4f 93       	push	r20
 888:	5f 93       	push	r21
 88a:	6f 93       	push	r22
 88c:	7f 93       	push	r23
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
 892:	af 93       	push	r26
 894:	bf 93       	push	r27
 896:	ef 93       	push	r30
 898:	ff 93       	push	r31
	if(PRV0_pFunction!=NULL)
 89a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PRV0_pFunction>
 89e:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PRV0_pFunction+0x1>
 8a2:	30 97       	sbiw	r30, 0x00	; 0
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <__vector_1+0x30>
	{
		PRV0_pFunction();
 8a6:	09 95       	icall
	}
	
}
 8a8:	ff 91       	pop	r31
 8aa:	ef 91       	pop	r30
 8ac:	bf 91       	pop	r27
 8ae:	af 91       	pop	r26
 8b0:	9f 91       	pop	r25
 8b2:	8f 91       	pop	r24
 8b4:	7f 91       	pop	r23
 8b6:	6f 91       	pop	r22
 8b8:	5f 91       	pop	r21
 8ba:	4f 91       	pop	r20
 8bc:	3f 91       	pop	r19
 8be:	2f 91       	pop	r18
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

Disassembly of section .text.__vector_2:

000008ca <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	6f 93       	push	r22
 8de:	7f 93       	push	r23
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
 8e4:	af 93       	push	r26
 8e6:	bf 93       	push	r27
 8e8:	ef 93       	push	r30
 8ea:	ff 93       	push	r31
	if(PRV1_pFunction!=NULL)
 8ec:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <PRV1_pFunction>
 8f0:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <PRV1_pFunction+0x1>
 8f4:	30 97       	sbiw	r30, 0x00	; 0
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__vector_2+0x30>
	{
		PRV1_pFunction();
 8f8:	09 95       	icall
	}
	
}
 8fa:	ff 91       	pop	r31
 8fc:	ef 91       	pop	r30
 8fe:	bf 91       	pop	r27
 900:	af 91       	pop	r26
 902:	9f 91       	pop	r25
 904:	8f 91       	pop	r24
 906:	7f 91       	pop	r23
 908:	6f 91       	pop	r22
 90a:	5f 91       	pop	r21
 90c:	4f 91       	pop	r20
 90e:	3f 91       	pop	r19
 910:	2f 91       	pop	r18
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

Disassembly of section .text.__vector_3:

0000091c <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
 926:	2f 93       	push	r18
 928:	3f 93       	push	r19
 92a:	4f 93       	push	r20
 92c:	5f 93       	push	r21
 92e:	6f 93       	push	r22
 930:	7f 93       	push	r23
 932:	8f 93       	push	r24
 934:	9f 93       	push	r25
 936:	af 93       	push	r26
 938:	bf 93       	push	r27
 93a:	ef 93       	push	r30
 93c:	ff 93       	push	r31
	if(PRV2_pFunction!=NULL)
 93e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <PRV2_pFunction>
 942:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <PRV2_pFunction+0x1>
 946:	30 97       	sbiw	r30, 0x00	; 0
 948:	09 f0       	breq	.+2      	; 0x94c <__vector_3+0x30>
	{
		PRV2_pFunction();
 94a:	09 95       	icall
	}
	
 94c:	ff 91       	pop	r31
 94e:	ef 91       	pop	r30
 950:	bf 91       	pop	r27
 952:	af 91       	pop	r26
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	7f 91       	pop	r23
 95a:	6f 91       	pop	r22
 95c:	5f 91       	pop	r21
 95e:	4f 91       	pop	r20
 960:	3f 91       	pop	r19
 962:	2f 91       	pop	r18
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

Disassembly of section .text.__vector_12:

0000096e <__vector_12>:

}

void __vector_12(void) __attribute__((signal , used));
void __vector_12(void)
{
 96e:	1f 92       	push	r1
 970:	0f 92       	push	r0
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	0f 92       	push	r0
 976:	11 24       	eor	r1, r1
 978:	2f 93       	push	r18
 97a:	3f 93       	push	r19
 97c:	4f 93       	push	r20
 97e:	5f 93       	push	r21
 980:	6f 93       	push	r22
 982:	7f 93       	push	r23
 984:	8f 93       	push	r24
 986:	9f 93       	push	r25
 988:	af 93       	push	r26
 98a:	bf 93       	push	r27
 98c:	ef 93       	push	r30
 98e:	ff 93       	push	r31
   if(CallBack!=NULL)
 990:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <CallBack>
 994:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <CallBack+0x1>
 998:	30 97       	sbiw	r30, 0x00	; 0
 99a:	09 f0       	breq	.+2      	; 0x99e <__vector_12+0x30>
   {
	   CallBack();
 99c:	09 95       	icall
   else
   {
	   //error
   }

}
 99e:	ff 91       	pop	r31
 9a0:	ef 91       	pop	r30
 9a2:	bf 91       	pop	r27
 9a4:	af 91       	pop	r26
 9a6:	9f 91       	pop	r25
 9a8:	8f 91       	pop	r24
 9aa:	7f 91       	pop	r23
 9ac:	6f 91       	pop	r22
 9ae:	5f 91       	pop	r21
 9b0:	4f 91       	pop	r20
 9b2:	3f 91       	pop	r19
 9b4:	2f 91       	pop	r18
 9b6:	0f 90       	pop	r0
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	0f 90       	pop	r0
 9bc:	1f 90       	pop	r1
 9be:	18 95       	reti

Disassembly of section .text.libgcc.div:

000009c0 <__udivmodsi4>:
 9c0:	a1 e2       	ldi	r26, 0x21	; 33
 9c2:	1a 2e       	mov	r1, r26
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	fd 01       	movw	r30, r26
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__udivmodsi4_ep>

000009cc <__udivmodsi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	ee 1f       	adc	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	a2 17       	cp	r26, r18
 9d6:	b3 07       	cpc	r27, r19
 9d8:	e4 07       	cpc	r30, r20
 9da:	f5 07       	cpc	r31, r21
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__udivmodsi4_ep>
 9de:	a2 1b       	sub	r26, r18
 9e0:	b3 0b       	sbc	r27, r19
 9e2:	e4 0b       	sbc	r30, r20
 9e4:	f5 0b       	sbc	r31, r21

000009e6 <__udivmodsi4_ep>:
 9e6:	66 1f       	adc	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	1a 94       	dec	r1
 9f0:	69 f7       	brne	.-38     	; 0x9cc <__udivmodsi4_loop>
 9f2:	60 95       	com	r22
 9f4:	70 95       	com	r23
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	bd 01       	movw	r22, r26
 a00:	cf 01       	movw	r24, r30
 a02:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000a78 <__umulhisi3>:
 a78:	a2 9f       	mul	r26, r18
 a7a:	b0 01       	movw	r22, r0
 a7c:	b3 9f       	mul	r27, r19
 a7e:	c0 01       	movw	r24, r0
 a80:	a3 9f       	mul	r26, r19
 a82:	70 0d       	add	r23, r0
 a84:	81 1d       	adc	r24, r1
 a86:	11 24       	eor	r1, r1
 a88:	91 1d       	adc	r25, r1
 a8a:	b2 9f       	mul	r27, r18
 a8c:	70 0d       	add	r23, r0
 a8e:	81 1d       	adc	r24, r1
 a90:	11 24       	eor	r1, r1
 a92:	91 1d       	adc	r25, r1
 a94:	08 95       	ret

Disassembly of section .text.libgcc:

00000aca <__movmemx_qi>:
 aca:	99 27       	eor	r25, r25

00000acc <__movmemx_hi>:
 acc:	77 fd       	sbrc	r23, 7
 ace:	05 c0       	rjmp	.+10     	; 0xada <__movmemx_hi+0xe>
 ad0:	05 90       	lpm	r0, Z+
 ad2:	0d 92       	st	X+, r0
 ad4:	01 97       	sbiw	r24, 0x01	; 1
 ad6:	e1 f7       	brne	.-8      	; 0xad0 <__movmemx_hi+0x4>
 ad8:	08 95       	ret
 ada:	01 90       	ld	r0, Z+
 adc:	0d 92       	st	X+, r0
 ade:	01 97       	sbiw	r24, 0x01	; 1
 ae0:	e1 f7       	brne	.-8      	; 0xada <__movmemx_hi+0xe>
 ae2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000b0a <_fini>:
 b0a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000b0c <__funcs_on_exit>:
 b0c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000b0e <__simulator_exit>:
 b0e:	08 95       	ret

Disassembly of section .text.exit:

00000ae4 <exit>:
 ae4:	ec 01       	movw	r28, r24
 ae6:	0e 94 86 05 	call	0xb0c	; 0xb0c <__funcs_on_exit>
 aea:	0e 94 85 05 	call	0xb0a	; 0xb0a <_fini>
 aee:	ce 01       	movw	r24, r28
 af0:	0e 94 87 05 	call	0xb0e	; 0xb0e <__simulator_exit>
 af4:	ce 01       	movw	r24, r28
 af6:	0e 94 83 05 	call	0xb06	; 0xb06 <_Exit>

Disassembly of section .text._Exit:

00000b06 <_Exit>:
 b06:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
